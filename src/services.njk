---
layout: layout.njk
title: Services
---

<section class="services-section">
  <!-- Write to Us -->
  <div class="card write-us-card">
    <div class="write-us-content">
      <h2>Write to Us</h2>
      <p>
        Have a project in mind? Need a service quote or have questions about your design or system?
        Reach out to us â€” we're here to help.
      </p>
    </div>
  </div>

  <!-- Services Cards -->
  <div class="services-cards">
    {% set services = [
      {"title":"System Architecture & Integration","img":"/static/System Architecture & Integration.png","items":["Full-stack robotic system integration (mechanical, electrical, software)","Modular hardware design and scalable system architecture","Custom hardware-software interface bridges (USB, CAN, UART, Ethernet)","Sensor and actuator synchronization using real-time frameworks"]},
      {"title":"Embedded System Software","img":"/static/Embedded System Software.png","items":["Languages: C, C++, Embedded C, Python","RTOS: FreeRTOS, Zephyr, ChibiOS, bare-metal design","Platforms: STM32, ESP32, AVR, ARM Cortex-M","Protocols: UART, SPI, I2C, CAN, USB, BLE, LoRa, Zigbee","Interrupt handling, low-power optimization, memory management","Debugging via JTAG, SWD, logic analyzers, oscilloscope"]},
      {"title":"PCB Design, Manufacturing & Assembly","img":"/static/PCB Design, Manufacturing & Assembly.png","items":["Tools: Altium Designer, KiCad, Eagle","Multi-layer, HDI, BGA, and high-current layout design","Signal & power integrity, EMI/EMC design practices","Differential pair tuning, impedance control","DFM/DFT best practices","BOM, Gerber, drill, PnP file generation","Prototyping, assembly supervision, and production coordination"]},
      {"title":"CAD/CAM","img":"/static/CAD-CAM.png","items":["Tools: SolidWorks, Fusion 360, AutoCAD, Mastercam","3D modeling, complex assemblies, parametric design","CNC toolpath generation (2.5D, 3-axis, 5-axis)","G-code creation, post-processing, and simulation","Design for manufacturability (DFM) & assembly (DFA)","Sheet metal, injection molding, and rapid prototyping"]},
      {"title":"Simulation & Analysis","img":"/static/Simulation and Analysis.png","items":["Tools: ANSYS, COMSOL, SolidWorks Simulation, Fusion 360","FEA: Stress, fatigue, vibration, modal, thermal","CFD for airflow and enclosure cooling","Meshing strategies and real-world validation","Optimization of material, cost, and performance"]},
      {"title":"ROS, AI/ML & Control Systems","img":"/static/ROS, AI-ML & Control Systems.png","items":["ROS1 & ROS2: Custom nodes, MoveIt, Nav2, ROSBridge","Control systems: PID, LQR, MPC, FSM, adaptive control","Perception: SLAM (GMapping, Cartographer, RTAB-Map), sensor fusion","AI/ML: Object detection, navigation, edge deployment (Jetson, Pi)","ML frameworks: TensorFlow, PyTorch, scikit-learn","Simulation: Gazebo, RViz, digital twin integration"]},
      {"title":"Web & UI for Robotics","img":"/static/Web & UI for Robotics.png","items":["Real-time robot dashboards (React, vanilla JS, Tailwind)","ROS2 integration with web (ROSBridge, MQTT, WebSocket)","Visualizing sensor data, maps, robot states in browser","Control UIs for simulation or remote operation"]},
      {"title":"UI/UX Design","img":"/static/UI-UX Design.png","items":["Tools: Figma, Adobe XD, Sketch","User research, personas, and information architecture","Wireframes, prototypes, responsive layouts","Design systems and style guides","Accessibility (WCAG), usability testing","Developer handoff (Figma Inspect, Zeplin)"]},
      {"title":"DevOps for Embedded & Robotics","img":"/static/DevOps for Embedded & Robotics.png","items":["Git version control, GitHub Actions, CI/CD","Docker for reproducible builds and firmware toolchains","Automated testing pipelines for ROS/firmware projects","Cross-platform build systems and environment containers"]},
      {"title":"Testing, Validation & QA","img":"/static/Testing, Validation & QA.png","items":["Hardware bring-up, signal tracing, and validation","HIL (Hardware-in-the-Loop) and SIL testing","Oscilloscope, logic analyzer, multimeter diagnostics","Functional testing of assembled boards and robots"]},
      {"title":"Rapid Prototyping & Fabrication","img":"/static/Rapid Prototyping & Fabrication.png","items":["3D printing (FDM/SLA), laser cutting, CNC routing","Quick iteration cycles across CAD, PCB, and firmware","Fabrication of custom jigs, mounts, and test fixtures"]},
      {"title":"Documentation & Open Source","img":"/static/Documentation & Open Source.png","items":["Well-structured READMEs, installation and user guides","Markdown docs, Doxygen, and Sphinx for codebases","Open-source contributions with demo projects and walkthroughs","GitHub repositories with real-world engineering workflows"]}
    ] %}

    {% for s in services %}
    <div class="card service-card">
      <img src="{{ s.img | url }}" alt="{{ s.title }}" class="service-img" />
      <div class="service-content">
        <h2>{{ s.title }}</h2>
        <ul>
          {% for item in s.items %}
          <li>{{ item }}</li>
          {% endfor %}
        </ul>
      </div>
    </div>
    {% endfor %}
  </div>

  <!-- Carousel dots will be injected here -->
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
  const carousel = document.querySelector('.services-cards');
  const dotsContainer = document.createElement('div');
  dotsContainer.classList.add('carousel-dots');
  carousel.parentNode.appendChild(dotsContainer);

  const cards = carousel.querySelectorAll('.service-card');

  // Create dots dynamically
  cards.forEach((_, index) => {
    const dot = document.createElement('span');
    dot.addEventListener('click', () => {
      carousel.scrollTo({
        left: index * carousel.clientWidth * 0.93,
        behavior: 'smooth'
      });
      setActiveDot(index);
    });
    dotsContainer.appendChild(dot);
  });

  const dots = dotsContainer.querySelectorAll('span');
  if (dots[0]) dots[0].classList.add('active');

  function setActiveDot(index) {
    dots.forEach(dot => dot.classList.remove('active'));
    if (dots[index]) dots[index].classList.add('active');
  }

  // Sync dots with scroll
  carousel.addEventListener('scroll', () => {
    const scrollLeft = carousel.scrollLeft;
    const cardWidth = carousel.clientWidth * 0.93;
    const index = Math.round(scrollLeft / cardWidth);
    setActiveDot(index);
  });

  // Auto scroll
  let autoScroll = setInterval(() => nextSlide(), 4000);

  function nextSlide() {
    const maxScroll = carousel.scrollWidth - carousel.clientWidth;
    if (carousel.scrollLeft >= maxScroll - 5) {
      carousel.scrollTo({ left: 0, behavior: 'smooth' });
      setActiveDot(0);
    } else {
      carousel.scrollBy({ left: carousel.clientWidth * 0.93, behavior: 'smooth' });
      const nextIndex = Math.min(
        Math.round(carousel.scrollLeft / (carousel.clientWidth * 0.93)) + 1,
        dots.length - 1
      );
      setActiveDot(nextIndex);
    }
  }

  carousel.addEventListener('mouseenter', () => clearInterval(autoScroll));
  carousel.addEventListener('mouseleave', () => {
    autoScroll = setInterval(() => nextSlide(), 4000);
  });
});
</script>
